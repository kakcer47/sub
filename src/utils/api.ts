// P2P API - –∑–∞–º–µ–Ω–∞ Supabase
// –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ WASM + IndexedDB + WebSocket

export {
  createUser,
  getEntries,
  createEntry,
  toggleLike,
  getUserPreferences,
  updateUserPreferences,
  type CreateEntryData
} from '../lib/wasm-api'

// P2P —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export { p2pClient } from '../lib/p2p-client'
export { indexedDB } from '../lib/indexeddb'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P2P —Å–∏—Å—Ç–µ–º—ã
export const initP2P = async (): Promise<void> => {
  console.log('üöÄ Initializing P2P system...')
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexedDB
    await indexedDB.init()
    console.log('‚úÖ IndexedDB ready')

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ P2P —Å–µ—Ä–≤–µ—Ä—É
    await p2pClient.connect()
    console.log('‚úÖ P2P connected')

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    p2pClient.requestSync()
    console.log('‚úÖ Sync requested')

    console.log('üéâ P2P system initialized successfully!')

  } catch (error) {
    console.error('‚ùå Failed to initialize P2P system:', error)
    throw error
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ P2P —Å–∏—Å—Ç–µ–º—ã
export const getP2PStats = async () => {
  try {
    const stats = await indexedDB.getStats()
    
    return {
      ...stats,
      connected: p2pClient.connected,
      queueSize: p2pClient.queueSize,
      sizeFormatted: formatBytes(stats.size)
    }
  } catch (error) {
    console.error('‚ùå Failed to get P2P stats:', error)
    return null
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 Bytes'
  
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}