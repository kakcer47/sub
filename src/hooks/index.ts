import { useInfiniteQuery, useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { getEntries, toggleLike, getUserPreferences, updateUserPreferences, createEntry, CreateEntryData, p2pClient } from '../utils/api'
import { useStore } from '../store'
import { Entry, UserPreferences } from '../types'

// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ P2P
export const useEntries = () => {
  const { filters, sortType, user } = useStore()
  
  return useInfiniteQuery({
    queryKey: ['entries', filters, sortType, user?.id],
    queryFn: ({ pageParam = 0 }: { pageParam: number }) => {
      console.log(`üìÑ Fetching entries page ${pageParam}`)
      return getEntries(filters, sortType, pageParam, user?.id)
    },
    getNextPageParam: (lastPage: Entry[], allPages: Entry[][]) => {
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (25 –∑–∞–ø–∏—Å–µ–π), –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è
      const hasMore = lastPage.length === 25
      const nextPage = hasMore ? allPages.length : undefined
      
      console.log(`üìÑ Next page: ${nextPage}, last page size: ${lastPage.length}`)
      return nextPage
    },
    initialPageParam: 0,
    enabled: true,
    staleTime: 1000 * 30, // 30 —Å–µ–∫—É–Ω–¥ (–º–µ–Ω—å—à–µ —á–µ–º —Ä–∞–Ω—å—à–µ, —Ç.–∫. P2P –±—ã—Å—Ç—Ä–µ–µ)
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ (–¥–ª—è P2P —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  })
}

// –ú—É—Ç–∞—Ü–∏—è –ª–∞–π–∫–∞ —á–µ—Ä–µ–∑ P2P
export const useLikeMutation = () => {
  const queryClient = useQueryClient()
  const { user } = useStore()
  
  return useMutation({
    mutationFn: (entryId: number) => {
      if (!user?.telegram_id) {
        throw new Error('User not authenticated')
      }
      console.log(`‚ù§Ô∏è Toggling like for entry ${entryId}`)
      return toggleLike(entryId, user.telegram_id)
    },
    onMutate: async (entryId: number) => {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await queryClient.cancelQueries({ queryKey: ['entries'] })
      
      const previousEntries = queryClient.getQueryData(['entries'])
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
      queryClient.setQueryData(['entries'], (old: any) => {
        if (!old) return old
        
        const newPages = old.pages.map((page: Entry[]) =>
          page.map((entry: Entry) => {
            if (entry.id === entryId && user?.telegram_id) {
              const isLiked = entry.liked_by.includes(user.telegram_id)
              return {
                ...entry,
                liked_by: isLiked 
                  ? entry.liked_by.filter(id => id !== user.telegram_id)
                  : [...entry.liked_by, user.telegram_id]
              }
            }
            return entry
          })
        )
        
        return { ...old, pages: newPages }
      })
      
      return { previousEntries }
    },
    onError: (err, entryId, context) => {
      console.error('‚ùå Like mutation failed:', err)
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (context?.previousEntries) {
        queryClient.setQueryData(['entries'], context.previousEntries)
      }
    },
    onSuccess: () => {
      console.log('‚úÖ Like updated successfully')
      // P2P –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }
  })
}

// –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)
export const useUserPreferences = () => {
  const { user } = useStore()
  
  return useQuery<UserPreferences | null>({
    queryKey: ['preferences', user?.id],
    queryFn: () => {
      if (!user?.id) return null
      console.log(`üìã Fetching preferences for user ${user.id}`)
      return getUserPreferences(user.id)
    },
    enabled: !!user?.id,
    staleTime: 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç
  })
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
export const useUpdatePreferences = () => {
  const queryClient = useQueryClient()
  const { user } = useStore()
  
  return useMutation({
    mutationFn: (preferences: Partial<UserPreferences>) => {
      if (!user?.id) {
        throw new Error('User not authenticated')
      }
      console.log(`üíæ Updating preferences for user ${user.id}:`, preferences)
      return updateUserPreferences(user.id, preferences)
    },
    onSuccess: () => {
      console.log('‚úÖ Preferences updated')
      queryClient.invalidateQueries({ queryKey: ['preferences'] })
      queryClient.invalidateQueries({ queryKey: ['entries'] })
    },
    onError: (error) => {
      console.error('‚ùå Failed to update preferences:', error)
    }
  })
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ P2P
export const useCreateEntry = () => {
  const queryClient = useQueryClient()
  const { user } = useStore()
  
  return useMutation<Entry, Error, CreateEntryData>({
    mutationFn: async (entryData: CreateEntryData) => {
      if (!user?.id) {
        throw new Error('User not authenticated')
      }
      
      console.log(`üìù Creating entry: "${entryData.title}"`)
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ P2P API
      const entry = await createEntry({
        ...entryData,
        creator_id: user.id
      })
      
      console.log(`‚úÖ Entry created with ID: ${entry.id}`)
      return entry
    },
    onMutate: async (entryData: CreateEntryData) => {
      // –û—Ç–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
      await queryClient.cancelQueries({ queryKey: ['entries'] })
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—É—é –∑–∞–ø–∏—Å—å
      const optimisticEntry: Entry = {
        id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
        title: entryData.title,
        description: entryData.description,
        city: entryData.city,
        type: entryData.type,
        gender: entryData.gender,
        date: entryData.date,
        creator_id: user?.id || 0,
        liked_by: [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        creator: user || undefined
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      queryClient.setQueryData(['entries'], (old: any) => {
        if (!old) return { pages: [[optimisticEntry]], pageParams: [0] }
        
        const newPages = [...old.pages]
        newPages[0] = [optimisticEntry, ...newPages[0]]
        
        return { ...old, pages: newPages }
      })
      
      return { optimisticEntry }
    },
    onSuccess: (newEntry) => {
      console.log(`üéâ Entry "${newEntry.title}" created successfully`)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      queryClient.setQueryData(['entries'], (old: any) => {
        if (!old) return old
        
        const newPages = old.pages.map((page: Entry[], pageIndex: number) => {
          if (pageIndex === 0) {
            // –ó–∞–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é
            return page.map(entry => 
              entry.id === newEntry.id ? newEntry : entry
            )
          }
          return page
        })
        
        return { ...old, pages: newPages }
      })
      
      // P2P –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—à–ª–µ—Ç –∑–∞–ø–∏—Å—å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
      console.log('üì° Entry broadcasted via P2P')
    },
    onError: (error, entryData, context) => {
      console.error('‚ùå Failed to create entry:', error)
      
      // –£–¥–∞–ª—è–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—É—é –∑–∞–ø–∏—Å—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (context?.optimisticEntry) {
        queryClient.setQueryData(['entries'], (old: any) => {
          if (!old) return old
          
          const newPages = old.pages.map((page: Entry[]) =>
            page.filter(entry => entry.id !== context.optimisticEntry.id)
          )
          
          return { ...old, pages: newPages }
        })
      }
    }
  })
}

// P2P —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export const useP2PStats = () => {
  return useQuery({
    queryKey: ['p2p-stats'],
    queryFn: async () => {
      const { getP2PStats } = await import('../utils/api')
      return getP2PStats()
    },
    refetchInterval: 10000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    staleTime: 5000,
  })
}

// P2P —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const useP2PStatus = () => {
  const queryClient = useQueryClient()
  
  return useQuery({
    queryKey: ['p2p-status'],
    queryFn: () => ({
      connected: p2pClient.connected,
      queueSize: p2pClient.queueSize,
      timestamp: Date.now()
    }),
    refetchInterval: 2000, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    staleTime: 1000,
    onSuccess: (data) => {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å
      if (!data.connected) {
        console.log('üîÑ P2P disconnected, attempting to reconnect...')
        p2pClient.connect().catch(console.error)
      }
    }
  })
}