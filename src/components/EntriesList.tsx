import { useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useEntries } from '../hooks';
import { EntryCard } from './EntryCard';
import { useInView } from '../hooks/useInView';
import { Entry } from '../types';
import { p2pClient } from '../utils/api';
import { useQueryClient } from '@tanstack/react-query';

export const EntriesList = () => {
  const { t } = useTranslation();
  const { ref, inView } = useInView();
  const queryClient = useQueryClient();
  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    isLoading,
    isError,
  } = useEntries();

  // P2P —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    console.log('üîó –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ P2P —Å–æ–±—ã—Ç–∏—è');

    const handleNewEntry = (entry: Entry) => {
      console.log('üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ P2P:', entry.title);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      queryClient.setQueryData(['entries'], (oldData: any) => {
        if (!oldData) return { pages: [[entry]], pageParams: [0] };
        
        const newPages = [...oldData.pages];
        newPages[0] = [entry, ...newPages[0]];
        
        return {
          ...oldData,
          pages: newPages
        };
      });
    };

    const handleSyncComplete = (count: number) => {
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${count} –ø–æ—Å—Ç–æ–≤`);
      // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      queryClient.invalidateQueries({ queryKey: ['entries'] });
    };

    const handleEntryUpdate = (data: any) => {
      if (data.type === 'like_toggle') {
        console.log('‚ù§Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ –∏–∑ P2P:', data.entryId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
        queryClient.setQueryData(['entries'], (oldData: any) => {
          if (!oldData) return oldData;
          
          const newPages = oldData.pages.map((page: Entry[]) =>
            page.map((entry: Entry) => {
              if (entry.id === data.entryId) {
                const isLiked = entry.liked_by.includes(data.userId);
                return {
                  ...entry,
                  liked_by: isLiked 
                    ? entry.liked_by.filter(id => id !== data.userId)
                    : [...entry.liked_by, data.userId]
                };
              }
              return entry;
            })
          );
          
          return { ...oldData, pages: newPages };
        });
      }
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    p2pClient.on('new_entry', handleNewEntry);
    p2pClient.on('sync_complete', handleSyncComplete);
    p2pClient.on('entry_update', handleEntryUpdate);

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('üîó –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç P2P —Å–æ–±—ã—Ç–∏–π');
      p2pClient.off('new_entry', handleNewEntry);
      p2pClient.off('sync_complete', handleSyncComplete);
      p2pClient.off('entry_update', handleEntryUpdate);
    };
  }, [queryClient]);

  // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
  useEffect(() => {
    if (inView && hasNextPage && !isFetchingNextPage) {
      console.log('üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      fetchNextPage();
    }
  }, [inView, hasNextPage, isFetchingNextPage, fetchNextPage]);

  if (isLoading) {
    return (
      <div className="flex justify-center py-8">
        <div className="flex flex-col items-center space-y-2">
          <div className="w-6 h-6 border-2 border-secondary border-t-transparent rounded-full animate-spin" />
          <p className="text-sm text-secondary">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ P2P...</p>
        </div>
      </div>
    );
  }

  if (isError) {
    return (
      <div className="text-center py-8">
        <div className="text-red-500 mb-2">‚ùå</div>
        <p className="text-secondary text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
        <button 
          onClick={() => {
            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
            p2pClient.requestSync();
            queryClient.invalidateQueries({ queryKey: ['entries'] });
          }}
          className="mt-2 px-4 py-2 bg-primary text-white text-sm rounded-lg"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  const entries = data?.pages.flatMap((page: Entry[]) => page) || [];

  if (entries.length === 0) {
    return (
      <div className="text-center py-8">
        <div className="text-6xl mb-4">üì≠</div>
        <p className="text-secondary mb-4">{t('empty')}</p>
        <button 
          onClick={() => {
            console.log('üîÑ –ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            p2pClient.requestSync();
          }}
          className="px-4 py-2 bg-primary text-white text-sm rounded-lg"
        >
          üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ P2P */}
      <div className="text-center text-xs text-secondary mb-4">
        üìä {entries.length} –ø–æ—Å—Ç–æ–≤ ‚Ä¢ 
        {p2pClient.connected ? ' üü¢ –û–Ω–ª–∞–π–Ω' : ' üî¥ –û—Ñ–ª–∞–π–Ω'}
        {p2pClient.queueSize > 0 && ` ‚Ä¢ üì§ ${p2pClient.queueSize}`}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ */}
      {entries.map((entry: Entry, index: number) => (
        <EntryCard key={`${entry.id}-${index}`} entry={entry} />
      ))}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div ref={ref} className="flex justify-center py-4">
        {isFetchingNextPage && (
          <div className="flex items-center space-x-2">
            <div className="w-4 h-4 border-2 border-secondary border-t-transparent rounded-full animate-spin" />
            <span className="text-xs text-secondary">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        )}
        {!hasNextPage && entries.length > 0 && (
          <p className="text-xs text-secondary">–í—Å–µ –ø–æ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
        )}
      </div>
    </div>
  );
};